/*
Use linked list concept to solve the problem, otherwise you will be disqualified from the contest.
*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct node{
    int key;
    struct node *left, *right;
};

int height(struct node* temp){
    if(temp == NULL)
        return 0;
    else{
        int lheight = height(temp->left);
        int rheight = height(temp->right);
        if(lheight > rheight){
            return lheight+1;
        }
        return rheight +1;
    }
}

void lev(struct node* temp, int level){
    if(temp == NULL){
        return;
    }
    if(level == 1){
        printf("%d ",temp->key);
    }
    else{
        lev(temp->left,level-1);
        lev(temp->right,level-1);
    }
}
struct node *newNode(int data) {
  struct node* temp = (struct node*)malloc(sizeof(struct node));
  temp->key = data;
  temp->left = temp->right = NULL;
  return temp;
}

struct node *insert(struct node *node, int key) {
  if (node == NULL) return newNode(key);

  if (key % 4 == 0)
    node->left = insert(node->left, key);
  else
    node->right = insert(node->right, key);

  return node;
}
void inorder(struct node *root) {
  int h = height(root);
    for(int i = 0; i < h; i++){
        lev(root,i+1);
    }
}

int main() {

 
  int n;
    int t;
    scanf("%d",&t);
    while(t-->0){
        struct node *root = NULL;
    scanf("%d",&n);
    int ar[n];
    for(int i = 0 ; i < n; i++){
        scanf("%d",&ar[i]);
        root = insert(root, ar[i]);
    }
  inorder(root);
        printf("\n");
    }
    return 0;
}
